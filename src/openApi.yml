swagger: "2.0"
info:
  description: "This is a Book Store server"
  version: "1.0.0"
  title: "Book Store"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "uvak777@gamil.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "bookstore.swagger.io"
basePath: "/v2"
tags:
  - name: "book"
  - name: "publisher"
  - name: "author"
schemes:
  - "https"
  - "http"
paths:
  /books:
    get:
      tags:
        - "books"
      summary: "Returns a list of books"
      description: ""
      operationId: "getBooks"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        '200':
          description: "successfully saved books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/book"
        '405':
          description: "Invalid input"
  /book:
    post:
      tags:
        - "book"
      summary: "Add a new book to the store"
      description: ""
      operationId: "addBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Book object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/book"
      responses:
        "200":
          description: "successfully saved book"
          schema:
            $ref: "#/definitions/book"
        "405":
          description: "Invalid input"
  /book/{bookID}:
    get:
      tags:
        - "book"
      summary: "Find book by ID"
      description: "Returns a single book"
      operationId: "getBookById"
      produces:
        - "application/json"
      parameters:
        - name: "bookID"
          in: "path"
          description: "ID of book to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/book"
        "404":
          description: "Book not found"
    put:
      tags:
        - "book"
      summary: "Updates a book in the store with form data"
      description: ""
      operationId: "updateBookWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "bookID"
          in: "path"
          description: "ID of book that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "bookName"
          in: "formData"
          description: "Updated name of the book"
          required: false
          type: "string"
        - name: "publisher"
          in: "formData"
          description: "Updated publisher of the book"
          required: false
          type: "string"
        - name: "numberOfPages"
          in: "formData"
          description: "Updated number of pages of the book"
          required: true
          type: "integer"
        - name: "year"
          in: "formData"
          description: "Updated year of the book"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/book"
        "405":
          description: "Invalid input"
    delete:
      tags:
        - "book"
      summary: "Deletes a book"
      description: ""
      operationId: "deleteBook"
      produces:
        - "application/json"
      parameters:
        - name: "bookID"
          in: "path"
          description: "Book id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Book not found"
  /publishers:
    get:
      tags:
        - "publishers"
      summary: "Returns a list of publishers"
      description: ""
      operationId: "getPublishers"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        '200':
          description: "successfully saved publishers"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/publisher"
        '405':
          description: "Invalid input"
  /publisher:
    post:
      tags:
        - "publisher"
      summary: "Add a new publisher to the store"
      description: ""
      operationId: "addPublisher"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Publisher object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/publisher"
      responses:
        "200":
          description: "successfully saved book"
          schema:
            $ref: "#/definitions/publisher"
        "405":
          description: "Invalid input"
  /publisher/{publisherID}:
    get:
      tags:
        - "publisher"
      summary: "Find publisher by ID"
      description: "Returns a single publisher"
      operationId: "getPublisherById"
      produces:
        - "application/json"
      parameters:
        - name: "publisherID"
          in: "path"
          description: "ID of publisher to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "publisher not found"
    put:
      tags:
        - "publisher"
      summary: "Updates a publisher in the store with form data"
      description: ""
      operationId: "updatePublisherWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "publisherID"
          in: "path"
          description: "ID of publisher that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "publisherName"
          in: "formData"
          description: "Updated name of the publisher"
          required: false
          type: "string"
        - name: "publisherBooks"
          in: "formData"
          description: "Updated written books of the author"
          required: false
          type: array
          items:
            type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/publisher"
        "405":
          description: "Invalid input"
    delete:
      tags:
        - "publisher"
      summary: "Deletes a publisher"
      description: ""
      operationId: "deletePublisher"
      produces:
        - "application/json"
      parameters:
        - name: "publisherID"
          in: "path"
          description: "Publisher id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "publisher not found"
  /authors:
    get:
      tags:
        - "authors"
      summary: "Returns a list of authors"
      description: ""
      operationId: "getAuthors"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        '200':
          description: "Successfully saved authors"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/author"
        '405':
          description: "Invalid input"
  /author:
    post:
      tags:
        - "author"
      summary: "Add a new author to the store"
      description: ""
      operationId: "addAuthor"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Author object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/author"
      responses:
        "405":
          description: "Invalid input"
  /author/{authorID}:
    get:
      tags:
        - "author"
      summary: "Find author by Id"
      description: "Returns a single author"
      operationId: "getAuthorById"
      produces:
        - "application/json"
      parameters:
        - name: "authorID"
          in: "path"
          description: "ID of author to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/author"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Author not found"
    put:
      tags:
        - "author"
      summary: "Updates an author in the store with form data"
      description: ""
      operationId: "updateAuthorWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "authorID"
          in: "path"
          description: "ID of author that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "authorSurname"
          in: "formData"
          description: "Updated name of the author"
          required: false
          type: "string"
        - name: "authorName"
          in: "formData"
          description: "Updated name of the author"
          required: false
          type: "string"
        - name: "authorPatronymic"
          in: "formData"
          description: "Updated patronymic of the author"
          required: false
          type: "string"
        - name: "birthDate"
          in: "formData"
          description: "Updated date of birth of the author"
          required: false
          type: "string"
          format: "date"
        - name: "writtenBooks"
          in: "formData"
          description: "Updated written books of the author"
          required: false
          type: array
          items:
            type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/book"
        "405":
          description: "Invalid input"
    delete:
      tags:
        - "author"
      summary: "Deletes an author"
      description: ""
      operationId: "deleteAuthor"
      produces:
        - "application/json"
      parameters:
        - name: "authorID"
          in: "path"
          description: "Author id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "author not found"
definitions:
  author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      authorSurname:
        type: "string"
        format: "byte"
      authorName:
        type: "string"
        format: "byte"
      authorPatronymic:
        type: "string"
        format: "byte"
      birthDate:
        type: "string"
        format: "date"
      writtenBooks:
        type: "array"
        items:
          $ref: "#/definitions/book"
  publisher:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      publisherName:
        type: "string"
        format: "byte"
      publishedBooks:
        type: "array"
        items:
          $ref: "#/definitions/book"
  book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      price:
        type: "number"
        format: "double"
      authorsOfBook:
        type: "array"
        items:
          $ref: "#/definitions/author"
      publisher:
        $ref: "#/definitions/publisher"
      bookName:
        type: "string"
        format: "byte"
      numberOfPages:
        type: "integer"
        format: "int64"
      year:
        type: "integer"
        format: "int64"